package  {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;		public class GameOverScreen extends MovieClip {				public var mines 		: int;		public var mineScore 	: int;		public var tiles 		: int;		public var tileScore 	: int;		public var penalty 		: int;		public var penaltyScore : int;		public var speed 		: Number = 0;		public var score		: int;		public var alphabet		: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!";		public var currentInitial : int = 0;		public var initialIndexArray : Array = [0, 0, 0];		public var threshold	: int = 0;				public function GameOverScreen() {			buttonMode = true;			mouseChildren = false;			addEventListener( MouseEvent.CLICK, _onClick );			initial1.textColor = 0x00ff00;			submit.visible = false;		}				public function getGameScore( $grid : Grid ) : void {			//Tabulate Score From Grid State			mines = 0;			mineScore = 0;			tiles = 0;			tileScore = 0;			penalty = 0;			penaltyScore = 0;			currentInitial = 0;			initial1.textColor = 0x00ff00;			submit.visible = false;						var i : int;			for (i = 0; i < $grid.tiles.length; i++) {				var tile : Tile = $grid.tiles[i];								//Tile Flagged - Is Mine (+mines)				if (tile.isFlagged && tile.isMine) mines++;				//Tile Flagged - Is Not Mine (+penalty)				else if (tile.isFlagged && !tile.isMine) penalty++;								//Tile Revealed - Is Mine (+penalty)				if (tile.scored && tile.isMine) penalty++;								//Tile Revealed - Is Not Mine (+tiles)				if (tile.scored && !tile.isMine) {					tiles++;					tileScore += getTileScore(tile.tf.text);				}			}						mineScore = mines * 100;			penaltyScore = penalty * 100;			score = Math.max(0, mineScore + tileScore - penaltyScore);						minesTF.text = String(mines);			minesScoreTF.text = String(mineScore);			tilesTF.text = String(tiles);			tilesScoreTF.text = String(tileScore);			speedTF.text = "0";			penaltyTF.text = String(penalty);			penaltyScoreTF.text = String(penaltyScore);			scoreTF.text = String(score);					}				public function checkHighScore() : void {			if (score <= threshold) {				if (!hasEventListener(MouseEvent.CLICK)) addEventListener( MouseEvent.CLICK, _onClick);				directions.visible = initial1.visible = initial2.visible = initial3.visible = false;				return;			}						if (hasEventListener(MouseEvent.CLICK)) removeEventListener( MouseEvent.CLICK, _onClick );			directions.visible = initial1.visible = initial2.visible = initial3.visible = true;		}				public function submitScore() : void {			if (currentInitial < 3) return;						directions.visible = false;			initial1.visible = initial2.visible = initial3.visible = false;			submit.visible = false;			visible = false;			dispatchEvent( new Event("submitHighScore", true, false) );		}				public function initialIncrement() : void {			if (currentInitial > 2) return;						var index : int = initialIndexArray[ currentInitial ];			index++;			if (index > alphabet.length) index = 0;			initialIndexArray[ currentInitial ] = index;						switch (currentInitial) {				case 0:					initial1.text = alphabet.charAt( initialIndexArray[currentInitial] );					break;				case 1:					initial2.text = alphabet.charAt( initialIndexArray[currentInitial] );					break;				case 2:					initial3.text = alphabet.charAt( initialIndexArray[currentInitial] );					break;			}		}				public function initialDecrement() : void {			if (currentInitial > 2) return;						var index : int = initialIndexArray[ currentInitial ];			index--;			if (index < 0) index = alphabet.length - 1;			initialIndexArray[ currentInitial ] = index;						switch (currentInitial) {				case 0:					initial1.text = alphabet.charAt( initialIndexArray[currentInitial] );					break;				case 1:					initial2.text = alphabet.charAt( initialIndexArray[currentInitial] );					break;				case 2:					initial3.text = alphabet.charAt( initialIndexArray[currentInitial] );					break;			}		}				public function initialNext() : void {			if (currentInitial < 3) {				this["initial"+(currentInitial+1)].textColor = 0xffffff;				currentInitial++;			}			if (currentInitial >= 2) {				submit.visible = true;				initial3.textColor = 0xffffff;			} else {				this["initial"+(currentInitial+1)].textColor = 0x00ff00;			}		}				public function initialPrev() : void {			if (currentInitial > 0) {				if (currentInitial < 3) this["initial"+(currentInitial+1)].textColor = 0xffffff;				currentInitial--;				this["initial"+(currentInitial+1)].textColor = 0x00ff00;			}			if (currentInitial < 2) {				submit.visible = false;			}		}				public function getTileScore( $s : String ) : int {			switch ( $s ) {				case "-":					return 10;					break;				case "1":					return 20;					break;				case "2":					return 30;					break;				case "3":					return 50;					break;				case "4":					return 80;					break;				case "5":					return 130;					break;				case "6":					return 210;					break;				case "7":					return 340;					break;				case "8":					return 500;					break;			}			return 0;		}				protected function _onClick( $e : MouseEvent ) : void {			visible = false;		}	}	}