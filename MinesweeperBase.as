package  {		import flash.display.BlendMode;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.ui.Keyboard;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.Event;		import mochi.as3.*;		public class MinesweeperBase extends MovieClip {				public var grid : Grid;		public var clock : Clock;		public var shiftPressed : Boolean = false;		public var startButton : StartButton;		public var ad : MovieClip;		public var score : int;		public var final_score : int;		public var scoreString : String = "00000";		public var highscores : HighScoresScreen;				public function MinesweeperBase() {			gotoAndStop(1);						ad = new MovieClip();			adHolder.addChild(ad);			MochiAd.showPreGameAd({clip:ad, id:"e89329ce0ddc9f26", res:"480x320"});						addEventListener(Event.ENTER_FRAME, _preload);		}				protected function _preload( $e : Event ) : void {			if (stage.loaderInfo.bytesLoaded >= stage.loaderInfo.bytesTotal) {				removeEventListener(Event.ENTER_FRAME, _preload);				gotoAndStop(2);				init();			}		}				public function init() : void {			addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);			addEventListener(KeyboardEvent.KEY_UP, _onKeyUp);			addEventListener("explosion", _onMineExplosion);			addEventListener("timeExpired", _onTimeExpired);			addEventListener("revealed", _onTileRevealed);			addEventListener("flagPlaced", _onFlagPlaced);			addEventListener("flagRemoved", _onFlagRemoved);			addEventListener("submitHighScore", _onSubmitHighScore);						startButton = new StartButton();			startButton.mouseChildren = false;			startButton.buttonMode = true;			startButton.addEventListener(MouseEvent.CLICK, _onStartClick);						gameOverScreen.visible = false;						gameLayer.addChild(startButton);			clock = new Clock();			clock.x = 192;			clock.y = 12;			gameLayer.addChild(clock);						playAgainButton.visible = false;			playAgainButton.buttonMode = true;			playAgainButton.mouseChildren = false;			playAgainButton.addEventListener(MouseEvent.CLICK, _onPlayAgain);						highScoresButton.buttonMode = true;			highScoresButton.mouseChildren = false;			highScoresButton.addEventListener(MouseEvent.CLICK, _onHighScoresButtonClick);						myScoresButton.buttonMode = true;			myScoresButton.mouseChildren = false;			myScoresButton.addEventListener(MouseEvent.CLICK, _onMyScoresButtonClick);						highscores = new HighScoresScreen();			highscores.visible = false;			highscores.buttonMode = true;			highscores.mouseChildren = false;			highscores.getLocalScores();			highscores.addEventListener(MouseEvent.CLICK, _onHighScoreClick);			addChild(highscores);						gameOverScreen.threshold = highscores.localScores[4];						createGrid();		}				public function createGrid() : void {			grid = new Grid();			grid.x = 130;			grid.y = 70;			grid.scaleX = grid.scaleY = 1.15;			addChildAt(grid, 1);						startButton.width = grid.width + 1;			startButton.height = grid.height + 1;			startButton.x = 129;			startButton.y = 69;		}				protected function _onStartClick( $e : MouseEvent ) : void {			startButton.visible = false;			//start the clock			score = 0;			scoreString = "00000";			scoreTF.text = scoreString;			clock.countdown();		}				protected function _onKeyDown( $e : KeyboardEvent ) : void {			if ($e.keyCode == Keyboard.SHIFT) {				shiftPressed = true;			}		}				protected function _onKeyUp( $e : KeyboardEvent ) : void {			if ($e.keyCode == Keyboard.RIGHT || $e.keyCode == Keyboard.DOWN) {				gameOverScreen.initialIncrement();			} else if ($e.keyCode == Keyboard.LEFT || $e.keyCode == Keyboard.UP) {				gameOverScreen.initialDecrement();			} else if ($e.keyCode == Keyboard.SPACE) {				gameOverScreen.initialNext();				gameOverScreen.submitScore();			} else if ($e.keyCode == Keyboard.BACKSPACE) {				gameOverScreen.initialPrev();			} else if ($e.keyCode == Keyboard.ENTER) {				gameOverScreen.submitScore();			} else if ($e.keyCode == Keyboard.SHIFT) {				shiftPressed = false;			}		}				protected function _onMineExplosion( $e : Event ) : void {			//stop the clock			clock.halt();			//score			score = Math.max(0, score - 100);			updateScore();			//display the restart button			playAgainButton.visible = true;			gameOver();		}				protected function _onTimeExpired( $e : Event ) : void {			Tile(grid.tiles[0]).lose();			playAgainButton.visible = true;			gameOver();		}				public function gameOver() : void {			gameOverScreen.getGameScore( grid );			gameOverScreen.checkHighScore();			gameOverScreen.visible = true;		}				protected function _onPlayAgain( $e : MouseEvent ) : void {			//hide playAgainButton			playAgainButton.visible = false;			//reset the grid			grid.reset();			//reset the clock			clock.reset();			//display start button			startButton.visible = true;		}				protected function _onTileRevealed( $e : Event ) : void {						var tileValue : int;						switch ( Tile($e.target).tf.text ) {				case "-":					tileValue = 10;					break;				case "1":					tileValue = 20;					break;				case "2":					tileValue = 30;					break;				case "3":					tileValue = 50;					break;				case "4":					tileValue = 80;					break;				case "5":					tileValue = 130;					break;				case "6":					tileValue = 210;					break;				case "7":					tileValue = 340;					break;				case "8":					tileValue = 500;					break;								}			score += tileValue;			updateScore();		}				protected function _onFlagPlaced( $e : Event ) : void {			score += 100;			updateScore();		}				protected function _onFlagRemoved( $e : Event ) : void {			score = Math.max(0, score - 100);			updateScore();		}				protected function _onHighScoresButtonClick( $e : MouseEvent ) : void {			highscores.visible = true;			highscores.getWorldScores();		}				protected function _onHighScoreClick( $e : MouseEvent ) : void {			highscores.visible = false;		}				protected function _onMyScoresButtonClick( $e : MouseEvent ) : void {			highscores.visible = true;			highscores.getLocalScores();		}				public function updateScore() : void {			scoreString = scoreString.substr(0, scoreString.length - String(score).length) + String(score);			scoreTF.text = scoreString;		}				protected function _onSubmitHighScore( $e : Event ) : void {			var player : String = gameOverScreen.initial1.text + gameOverScreen.initial2.text + gameOverScreen.initial3.text;			var score : uint = gameOverScreen.score;			highscores.submit(score, player);		}			}}